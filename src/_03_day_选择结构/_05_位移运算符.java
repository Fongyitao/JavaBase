package _03_day_选择结构;

public class _05_位移运算符 {
    public static void main(String[] args) {
        /**
         * A:案例演示 >>,>>>,<<的用法:
         *  <<:左移    左边最高位丢弃，右边补齐0
         *  >>:右移    最高位是0，左边补齐0;最高为是1，左边补齐1
         *  >>>:无符号右移 无论最高位是0还是1，左边补齐0
         *  最有效率的算出2 * 8的结果
         */

        //左移 << ,向左移动几位就是乘以2的几次幂
        System.out.println(12 << 2);// 48
    /*
     00000000 00000000 00000000 00001100	12（正数的原反补相同）
     00000000 00000000 00000000 00110000	向左移动2位，就是48，补码形式运算
     */

        System.out.println(-12 << 2);// -48
    /*
     10000000 00000000 00000000 00001100	-12的原码
     11111111 11111111 11111111 11110011	-12的反码
     11111111 11111111 11111111 11110100	末位加1得-12的补码
     以补码形式运算，左移两位
     11111111 11111111 11111111 11010000	获得补码形式，是个负数
     11111111 11111111 11111111 11001111	减去1获得反码形式
     10000000 00000000 00000000 00110000	除符号位之外，逐位取反得到原码，-48
     */

        System.out.println(-12 >> 2);// -3
    /*
     * >>:右移    最高位是0，左边补齐0;最高为是1，左边补齐1

     10000000 00000000 00000000 00001100	-12的原码
     11111111 11111111 11111111 11110011	-12的反码
     11111111 11111111 11111111 11110100	末位加1得-12的补码
     以补码形式运算，右移两位
     11111111 11111111 11111111 11111101	获得补码形式，是个负数
     11111111 11111111 11111111 11111100	减去1获得反码形式
     10000000 00000000 00000000 00000011	除符号位之外，逐位取反得到原码，-3
     */

        System.out.println(-12 >>> 2);// 1073741821，无符号右移
    }
}


